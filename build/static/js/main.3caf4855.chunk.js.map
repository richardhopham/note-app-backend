{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","useEffect","noteService","initialNotes","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAYiBA,EAVJ,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCNpCK,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMC,IAAIF,EAASM,GACpBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACE,EAAID,GAElB,OADgBL,IAAMO,IAAN,UAAaR,EAAb,YAAwBO,GAAMD,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCH5BI,G,MAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAe,OAAZA,EACQ,KAIP,qBAAKb,UAAU,QAAf,SACMa,MCOCC,EAdA,WAMX,OACI,sBAAKC,MANW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACI,uBACA,uEC2EGC,EA7EH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMVC,EAAcJ,EAAUJ,EAAQA,EAAMS,QAAO,SAAAlC,GAAI,OAAIA,EAAKG,aAEhEgC,qBAAU,WACRC,IACC1B,MAAK,SAAA2B,GACJX,EAASW,QAEV,IAyCH,OACE,gCACE,cAAC,EAAD,CAAcpB,QAASc,IACvB,uCACA,8BACE,yBAAQzB,QAAS,kBAAMwB,GAAYD,IAAnC,kBACQA,EAAU,YAAa,WAGjC,6BACGI,EAAYK,KAAI,SAAAtC,GAAI,OACnB,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBAnC/B,SAACa,GAC1B,IAAMd,EAAOyB,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BACZzC,GADY,IACNG,WAAaH,EAAKG,YAE7BiC,EAAmBtB,EAAI2B,GAAa/B,MAAK,SAAAgC,GACvChB,EAASD,EAAMa,KAAI,SAAAtC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAM0C,SAEnDC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OACJhC,EAAKK,QADD,0CAGfwC,YAAW,WACTb,EAAgB,QAEf,KACHN,EAASD,EAAMS,QAAO,SAAAM,GAAC,OAAIA,EAAE1B,KAAOA,SAmBwBgC,CAAmB9C,EAAKc,MAArEd,EAAKc,SAGpB,uBAAMiC,SArDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB7C,QAASsB,EACTwB,MAAM,IAAIC,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,GAC3BzC,GAAIW,EAAM+B,OAAS,GAErBpB,EAAmBc,GAClBxC,MAAK,SAAAgC,GACJhB,EAASD,EAAMgC,OAAOf,IACtBd,EAAW,QA0CX,UACE,uBAAO8B,MAAO/B,EAASgC,SAnBJ,SAACX,GACxBpB,EAAWoB,EAAMY,OAAOF,UAmBpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,QC1ENC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3caf4855.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\n  export default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.get(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","const Notification = ({ message }) => {\r\n    if(message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            { message }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","const Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16,\r\n    }\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Created by Richard Pham</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport './index.css'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  useEffect(() => {\n    noteService.getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    }\n    noteService.create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {\n      ...note, important : !note.important\n    }\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note: returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from the server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <Notification message={errorMessage} />\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important': 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}> \n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}